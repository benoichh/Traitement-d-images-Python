#python3 detection.py ImagesCensuree ImagesDetectee


from PIL import Image
import sys
from os import listdir



#Fonction exécuter lorsque l'on lance le programme
def Start():
	print("")
	files = listdir(sys.argv[1])

	if(len(sys.argv) > 2 and sys.argv[2] == "black"):
	        black = True
	
	percent = 0.95
	
	for f in files:
		if f.endswith(".jpg") or f.endswith(".png") :	
			im = Image.open(sys.argv[1]+"/"+f)
			img = im.convert("RGB")
			side = calculeside(img)
			image = reconize(img)
			image.save(sys.argv[2]+"/"+"detecte_"+ f)
			reussite(f,image)

#Fonction permettant de reconnaître la censure en essaynt de trouver des pixels de même couleurs côte à côte
def reconize(img):

	pixR = img.load()
	thumb = img.copy()
	pix = thumb.load()

	list_X = []
	list_Y = []

	#Reconnaître des pixels similaires côte à côte
	for x in range(0,img.size[0]-side, side):


		for y in range(0,img.size[1]-side,side):

			if(pix[x,y] != (0,0,255)):

				cmpt = 0

				for xp in range(x,x+side):
					for yp in range(y,y+side):
						if(soustraction(pixR[xp,yp],pixR[x,y]) <= 3):
							cmpt += 1

				if(cmpt >= side*side*percent):
					for xp in range(x,x+side):
						for yp in range(y,y+side):
							list_X.append(xp)
							list_Y.append(yp)
							
	

	for i in range(len(list_X)):
		X = list_X[i]
		Y = list_Y[i]

		pix[X,Y] = 0,0,255



    #Reconnaître des rectangle à 90% de bleu
	for x in range(0,img.size[0]-side,side):

		for y in range(0,img.size[1]-side,side):
			
			if(pix[x,y] == (0,0,255)):

				cmpt2 = 0

				for xp in range(x,x+side):
					for yp in range(y,y+side):
						if(pix[xp,yp]==(0,0,255)):
							cmpt2 += 1
			
				if(cmpt2 >= side*side*percent):
					for xp in range(x+1,x+side):
						for yp in range(y+1,y+side):
							pix[xp, yp] = 0,0,255


	thumb.show()
	return thumb


def reussite(f,image):

	print("Resultat")
	print("")

	Good = 0
	FauxNegatif = 0
	FauxPositif = 0
	totGT = 0
	Resolution = image.size[0]*image.size[1]

	maskGT = Image.new( "L",image.size)
	pixGT = maskGT.load()

	fn = "Coordonnee/"+ f + ".txt"
	for line in open(fn):
		x,y,r = tuple(map(int, line.split()))

		for i in range(x,x+r):
			for j in range(y,y+r):
				totGT = totGT + 1
				pixGT[i,j] = 255
	#maskGT crée (mask vrai)


	pix = image.load()
	maskRes = Image.new( "L",image.size)
	pixRes = maskRes.load()
	
	for x in range(image.size[0]):
		for y in range(image.size[1]):
			if(pix[x,y] == (0,0,255)):
				pixRes[x,y] = 200
	#maskRes crée (mask que le programme trouve)


	maskFinal = Image.new("RGB",image.size)
	pixfinal = maskFinal.load()
	for x in range(image.size[0]):
		for y in range(image.size[1]):
#Bon
			if(pixRes[x,y] == 200 and pixGT[x,y] == 255):
				pixfinal[x,y] = 0,255,0
				Good = Good +1
#FauxPositif
			if(pixRes[x,y] == 200 and pixGT[x,y] == 0):
				pixfinal[x,y] = 255,0,0
				FauxPositif = FauxPositif +1
#FauxNégatif
			if(pixRes[x,y] == 0 and pixGT[x,y] == 255):
				pixfinal[x,y] = 255,192,203
				FauxNegatif = FauxNegatif+1

	maskFinal.show()

	percentGood = (float) (Good/totGT)*100
	percentFauxPositif = (float) (FauxPositif/(Resolution-totGT))*100
	percentFauxNegatif = (float) (FauxNegatif/(Resolution-totGT))*100

	print(""+f + " positif = " , percentGood , " %")
	print(""+f + " Faux Positif = " , percentFauxPositif , " %")
	print(""+f + " Faux Negatif = " , percentFauxNegatif , " %")
	print("")
	print("")


'''
	Fichier = open("Coordonnee/"+ f + ".txt", "r")
	content = Fichier.readlines()
	for line in content:
		if(line == None):
			break
		if(line != None):
			Tab = tuple((int, line.split()))
			X = Tab[0]
			Y = Tab[1]
			rad = Tab[2]

			print(X)

			for i in range(X,X+rad):
				for p in range(Y,Y+rad):

					listCoord.append((i,p))
	return listCoord
'''


def calculeSide(img):
	pix = img.load()
	for x in range(img.size[0]-50):
		for y in range(img.size[1]):
			if(soustraction(pix[x,y],pix[x+1,y] <= 3):
				i = 1
				while(soustraction(pix[x,y],pix[x+i,y] <= 3):
					i = i + 1
				if(i > 1):
					print("Valeur radius : ",i)
					return i
				#else
					#voir quoi faire si non
			
			
#Fonction permettant la soustraction entre 2 pixels
def soustraction(pix1, pix2):

	R1,G1,B1 = pix1
	R2,G2,B2 = pix2
	
	#calcul soustraction
	R = abs(R1-R2)
	G = abs(G1-G2)
	B = abs(B1-B2)
	
	#pix3 = R,G,B
	total = R+G+B
	
	#return pix3
	return total					
					


#Faire des graphiques avec les % (voir pil plot)
#Si bleu moins que radius alors supprimer

Start()
